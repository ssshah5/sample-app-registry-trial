---
stages:
- name: Build
  inputs:
  - type: git
    branch: master
    service: ${SAMPLE_REPO}
  triggers:
  - type: commit
  jobs:
  - name: Build
    type: builder
    artifact_dir: ''
    build_type: npm
    script: |
      npm install
- name: Deploy
  inputs:
  - type: job
    stage: Build
    job: Build
    dir_name: null
  triggers:
  - type: stage
  jobs:
  - name: Deploy
    type: deployer
    target:
      region_id: ${PROD_REGION_ID}
      organization: ${PROD_ORG_NAME}
      space: ${PROD_SPACE_NAME}
      application: sample-registry-app
    script: |
      #!/bin/bash
      cf push "${CF_APP}"
- name: BUILD
  inputs:
  - type: git
    branch: master
  triggers:
  - type: commit
  jobs:
  - name: Container build
    type: builder
    extension_id: ibm.devops.services.pipeline.container.builder
    target:
      url: ${CF_TARGET_URL}
      organization: ${CF_ORGANIZATION}
      space: ${CF_SPACE}
    IMAGE_NAME: ${CF_APP}
    USE_CACHED_LAYERS: 'false'
    COMMAND: "#Buils\n\n \n\n# The following colors have been defined to\
      \ help with presentation of logs: green, red, label_color, no_color.  \necho\
      \ -e \"${label_color}Starting build script${no_color}\"\n\n# The IBM Container\
      \ Service CLI (ice), Git client (git), IDS Inventory CLI (ids-inv) and Python\
      \ 2.7.3 (python) have been installed.\n# Based on the organization and space\
      \ selected in the Job credentials are in place for both IBM Container Service\
      \ and IBM Bluemix \n#####################\n# Run unit tests    #\n#####################\n\
      echo -e \"${label_color}No unit tests cases have been checked in ${no_color}\"\
      \n\n######################################\n# Build Container via Dockerfile\
      \     #\n######################################\n\n# REGISTRY_URL=${CCS_REGISTRY_HOST}/${NAMESPACE}\n\
      # FULL_REPOSITORY_NAME=${REGISTRY_URL}/${IMAGE_NAME}:${APPLICATION_VERSION}\n\
      # If you wish to receive slack notifications, set SLACK_WEBHOOK_PATH as a property\
      \ on the stage.\n\n\n# Possible adding retries to build the image\nif [ -f Dockerfile\
      \ ]; then \n    echo -e \"${label_color}Building ${FULL_REPOSITORY_NAME} ${no_color}\"\
      \n    ${EXT_DIR}/utilities/sendMessage.sh -l info -m \"New container build requested\
      \ for ${FULL_REPOSITORY_NAME}\"\n    # build image\n    BUILD_COMMAND=\"\"\n\
      \    if [ \"${USE_CACHED_LAYERS}\" == \"true\" ]; then \n        BUILD_COMMAND=\"\
      build --pull --tag ${FULL_REPOSITORY_NAME} ${WORKSPACE}\"\n        ice_retry\
      \ ${BUILD_COMMAND}\n        RESULT=$?\n    else \n        BUILD_COMMAND=\"build\
      \ --no-cache --tag ${FULL_REPOSITORY_NAME} ${WORKSPACE}\"\n        ice_retry\
      \ ${BUILD_COMMAND}\n        RESULT=$?\n    fi \n\n    if [ $RESULT -ne 0 ];\
      \ then\n        echo -e \"${red}Error building image ${no_color}\" | tee -a\
      \ \"$ERROR_LOG_FILE\"\n        echo \"Build command: ice ${BUILD_COMMAND}\"\n\
      \        ice info \n        ice images\n        ${EXT_DIR}/print_help.sh\n \
      \       ${EXT_DIR}/utilities/sendMessage.sh -l bad -m \"Container build of ${FULL_REPOSITORY_NAME}\
      \ failed\"\n        exit 1\n    else\n        ${EXT_DIR}/utilities/sendMessage.sh\
      \ -l good -m \"Container build of ${FULL_REPOSITORY_NAME} was successful\"\n\
      \        echo -e \"${green}Container build of ${FULL_REPOSITORY_NAME} was successful\
      \ ${no_color}\"\n    fi  \nelse \n    echo -e \"${red}Dockerfile not found in\
      \ project${no_color}\"\n    exit 1\nfi  \n\n######################################################################################\n\
      # Copy any artifacts that will be needed for deployment and testing to $WORKSPACE\
      \    #\n######################################################################################\n\
      echo \"IMAGE_NAME=${FULL_REPOSITORY_NAME}\" >> $ARCHIVE_DIR/build.properties\n"
hooks:
- enabled: true
  label: null
  ssl_enabled: false
  url: https://devops-api.ng.bluemix.net/v1/messaging/webhook/publish
